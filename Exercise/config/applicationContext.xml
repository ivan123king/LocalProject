<?xml version="1.0" encoding="UTF-8"?>
<!-- spring框架的配置文件， -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd"
>
	
	<!-- 在容器中注册对象 -->	
	<!-- <bean id="userDao" class="com.lw.spring.springframework.simple.UserDaoImpl"/>
	<bean id="userService" class="com.lw.spring.springframework.simple.UserServiceImpl">
		此处的name值是对应UserServiceImpl中对应的属性名称，不是随便起的
		<property name="userDao" ref="userDao"></property>	
	</bean> -->
	
	<!-- 工厂方法构造对象  factory-method指定工厂方法,此方法必须是静态的-->
	<!-- <bean id="userService02" class="com.lw.spring.springframework.simple.BeansFactory"
		factory-method="createBean">
	</bean>
	
	<bean id="beanFactory" class="com.lw.spring.springframework.simple.BeansFactory"/>
	<bean id="userService03" factory-bean="beanFactory" factory-method="createService">
	</bean> -->
	
	<!-- 通过XML方式装配User实例 -->
	<!-- 方法一：通过索引注入构造函数的值 -->
	<!-- <bean id="user1" class="com.lw.spring.springframework.assemblage.User">
		<constructor-arg index="0" value="tom"/>
		<constructor-arg index="1" value="123455"/>
		<constructor-arg index="2">
			<list>
				<value>"constructorValue01"</value>
				<value>"constructorValue02"</value>
			</list>
		</constructor-arg>
	</bean> -->
	<!-- 方法二： 通过属性名注入构造函数的值  -->
	<!-- <bean id="user2" class="com.lw.spring.springframework.assemblage.User">
		<constructor-arg name="userName" value="幻影骑士"/>
		<constructor-arg name="password" value="123456"/>
		<constructor-arg name="list">
			<list>
				<value>"constructorValue11"</value>
				<value>"constructorValue12"</value>
			</list>
		</constructor-arg>
	</bean> -->
	<!-- 注解方式装配 -->
	<!-- 1. 开启注解处理器 -->
	<!-- <context:annotation-config/> -->
	<!--2.扫描指定包下面所有类使用注解
		如果需要指定某个类使用<bean id="" class=""/>配置-->
	<!-- 
	<context:component-scan base-package="com.lw.spring.springframework.assemblage"/> -->
	
	<!-- spring aop -->
	<!-- 1.目标类 -->
	<!-- <bean id="userDao" class="com.lw.spring.springframework.aspect.proxy.UserDaoImpl"/> -->
	<!-- 2.切面类 -->	
	<!-- <bean id="myAspect" class="com.lw.spring.springframework.aspect.MyAspect"/> -->
	<!-- 3.使用Spring的代理工厂定义一个userDaoProxy代理对象 -->
	<!-- <bean id="userDaoProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		指定代理实现的接口
		<property name="proxyInterfaces" value="com.lw.spring.springframework.aspect.proxy.UserDao"/>
		指定目标对象
		<property name="target" ref="userDao"/>
		指定切面，植入环绕通知
		<property name="interceptorNames" value="myAspect"/>
		指定代理方式，true：使用cglib,false(默认)：使用jdk动态代理
		<property name="proxyTargetClass" value="true"/>
	</bean> -->
	
	<!-- AspectJ方式实现切面 -->
	<!-- 定义切面Bean -->
	<!-- <bean id="myAspect" class="com.lw.spring.springframework.aspect.MyAspectJ"/>
	<aop:config>
		1.配置切面
		<aop:aspect id="aspect" ref="myAspect">
			2.配置切入点
				第一个* 表示返回类型，此处配置所有返回类型
				第二个* 表示类名，此处代表此aspect包下所有类，
				第三个* 表示方法，此处表示类中所有方法
				(..) 表示方法中参数
			
			<aop:pointcut expression="execution(* com.lw.spring.springframework.aspect.proxy.*.*(..))" 
				id="myPointCut"/>
			3.配置前置通知
			前置通知
			<aop:before method="myBefore" pointcut-ref="myPointCut"/>
			后置通知
			<aop:after-returning method="myAfterReturning" pointcut-ref="myPointCut" returning="returnVal" />
			环绕通知
			<aop:around method="myAround" pointcut-ref="myPointCut"/>
			异常通知
			<aop:after-throwing method="myAfterThrowing" pointcut-ref="myPointCut" throwing="e"/>
			最终通知
			<aop:after method="myAfter" pointcut-ref="myPointCut"/>
		</aop:aspect>
	</aop:config> -->
	
	<!-- 通过注解配置AspectJ -->
	<!-- <context:component-scan base-package="com.lw.spring.springframework.aspect"/>
	启动基于注解的声明式AspectJ支持
	<aop:aspectj-autoproxy/> -->
	
	<!-- Spring JDBC配置 -->
	<!--1. 配置数据源 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/test"/>
		<property name="username" value="root"/>
		<property name="password" value="root"/>
	</bean>
	<!--2. 配置JDBC模板 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<!-- 默认必须使用数据源， ref的值参考上面的bean id属性 -->
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!--3. 配置注入类 -->	
	<!-- <bean id="" class="">
		#ref处的值参考上面bean id属性
		<property name="jdbcTemplate" ref="jdbcTemplate"/>
	</bean> -->
	
	<!--4. 配置事务管理器，依赖数据源 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 5.编写通知： 对事务进行增强，需要编写对切入点和具体执行事务细节 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			name处的* 表示任意方法名称
				propagation 事务的传播行为
				isolation 事务隔离级别
			
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" read-only="false"/>
		</tx:attributes>
	</tx:advice> -->
	<!-- 6.编写AOP，让spring自动对目标生成代理，需要使用aspectJ的表达式 -->
	<!-- <aop:config>
		切入点
		<aop:pointcut expression="execution(* com.lw.spring.springframework.jdbc.*.*(..))" id="txPointCut"/>
		切面： 将切入点与通知整合
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
	</aop:config> -->
	
	<bean id="customerDao" class="com.lw.spring.springframework.jdbc.CustomerDaoImpl">
		<property name="jt" ref="jdbcTemplate"/>
	</bean>
	
	
	<!-- 注解方式声明事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
</beans>