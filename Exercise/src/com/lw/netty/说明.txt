Netty框架的练习目录：
	需要jar包： netty-all-XXX(版本).jar
	下载地址： http://netty.io/ 官网的downloads下有
	
EchoClient.java   客户端启动
EchoClientHandler.java  客户端信息处理类
EchoServer.java   服务端启动类
EchoServerHandler.java  服务端信息处理类
上面四个类构成最简单的一个netty服务端和客户端结构

websocket包是构建websocket的服务端代码
	ChatServer.java 是启动服务端的入口
	ChatServerInitializer.java  是在服务端中的chatpipeline中添加一系列的handler
	HttpRequestHandler.java  是访问服务器时返回给一个页面，采用读取html然后回写给浏览器方式，并不是直接可以访问html
	TextWebSocketFrameHandler.java 是接收客户端发送的信息，然后回写信息
	
	如果要添加服务端加密：
		SecureChatServer.java 继承了ChatServer.java
		SecureChatServerInitializer.java 继承了 ChatServerInitializer.java 
			在createInitializer方法中调用super.createInitializer()方法，所以能够添加
		ChatServerInitializer类中的Handler到ChannelPipeline中
		
		加密的入口就是SecureChatServer.java

udp是netty处理UDP协议数据
	LogEventBroadcaster类是启动入口，监听一个文件，如果此文件增加了数据那么就读取数据，writeAndFlush后，
	就会转到LogEventEncoder中方法做处理，将此文件名和增加的内容信息放在出站list中
	
	LogEventBroadcaster读取数据，然后由于LogEventEncoder在channelPipeline中，所以会得到发送过来的数据，
	LogEventEncoder将数据写入站中。
	有将数据写入站中，那么必然后从站中读取数据的类，就是LogEventMonitor和LogEventDecoder类，
	LogEventMonitor类绑定了和LogEventBroadcaster启动是一样的端口，目前是9999，所以Monitor类一直在监控9999端口
	的数据，当有数据从这个端口写入到站中，就会读取，此时同样由于LogEventDecoder在Moniter类的channelPipeline，它会
	得到数据，然后将数据从站中读取出来；
	
	简化流程如下：
	启动(LogEventBroadcaster   9999端口)-->读取日志文件有新数据-->数据写入站中(LogEventEncoder)
	启动(LogEventMonitor  监听9999端口)--->发现站中有数据--->从站中读取数据(LogEventDecoder)
	
	PS: LogEventEncoder和LogEventDecoder继承关系如下，所以他们都是Handler,可以被放在ChannelPipeline
	LogEventEncoder-->MessageToMessageEecoder-->ChannelOutboundHandlerAdapter
	LogEventDecoder-->MessageToMessageDecoder-->ChannelInboundHandlerAdapter
	
	
	
	
	
	
	
	
	
	

小记：
Linux上java调用外部Jar包： http://blog.csdn.net/u012865381/article/details/52171197 